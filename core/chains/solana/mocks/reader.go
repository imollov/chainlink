// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	rpc "github.com/gagliardetto/solana-go/rpc"
	mock "github.com/stretchr/testify/mock"

	solana "github.com/gagliardetto/solana-go"
)

// Reader is an autogenerated mock type for the Reader type
type Reader struct {
	mock.Mock
}

// AccountInfo provides a mock function with given fields: addr, opts
func (_m *Reader) AccountInfo(addr solana.PublicKey, opts *rpc.GetAccountInfoOpts) (*rpc.GetAccountInfoResult, error) {
	ret := _m.Called(addr, opts)

	var r0 *rpc.GetAccountInfoResult
	if rf, ok := ret.Get(0).(func(solana.PublicKey, *rpc.GetAccountInfoOpts) *rpc.GetAccountInfoResult); ok {
		r0 = rf(addr, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.GetAccountInfoResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(solana.PublicKey, *rpc.GetAccountInfoOpts) error); ok {
		r1 = rf(addr, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Balance provides a mock function with given fields: addr
func (_m *Reader) Balance(addr solana.PublicKey) (uint64, error) {
	ret := _m.Called(addr)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(solana.PublicKey) uint64); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(solana.PublicKey) error); ok {
		r1 = rf(addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecentBlockhash provides a mock function with given fields: commitment
func (_m *Reader) RecentBlockhash(commitment rpc.CommitmentType) (*rpc.GetRecentBlockhashResult, error) {
	ret := _m.Called(commitment)

	var r0 *rpc.GetRecentBlockhashResult
	if rf, ok := ret.Get(0).(func(rpc.CommitmentType) *rpc.GetRecentBlockhashResult); ok {
		r0 = rf(commitment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.GetRecentBlockhashResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(rpc.CommitmentType) error); ok {
		r1 = rf(commitment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SlotHeight provides a mock function with given fields:
func (_m *Reader) SlotHeight() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
